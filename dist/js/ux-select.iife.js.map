{"version":3,"file":"ux-select.iife.js","sources":["../../src/utils/events/triggerChange.ts","../../src/utils/events/triggerInput.ts","../../src/ux-select.ts"],"sourcesContent":["export default function triggerChange(el: HTMLElement): void {\n  const change: Event = new Event('change');\n  el.dispatchEvent(change);\n}\n","export default function triggerInput(el: HTMLElement): void {\n  const input: Event = new Event('input');\n  el.dispatchEvent(input);\n}\n","import './scss/ux-select.scss';\n\nimport { UxSelectParams, UxSelectOptions, UxSelectConfig, UxSelectLocalization, UxSelectState } from './types';\n\nimport triggerChange from './utils/events/triggerChange.ts';\nimport triggerInput from './utils/events/triggerInput.ts';\n\n/**\n * @class\n * @classdesc Creating a custom select element with support for grouping, searching, and other features.\n * @param {HTMLSelectElement} element - The original HTML <select> element to be transformed.\n * @param {Partial<UxSelectParams>} [params={}] - Optional parameters for configuring the behavior and appearance of UxSelect.\n */\nexport default class UxSelect {\n  el: HTMLSelectElement;\n\n  config: UxSelectConfig;\n  localization: UxSelectLocalization;\n  state: UxSelectState;\n\n  options: UxSelectOptions[];\n  groups: string[];\n\n  uxEl: Element;\n\n  private uxBody: HTMLDivElement | undefined;\n  private uxSearchInput: HTMLInputElement | undefined;\n  private uxClearButton: HTMLButtonElement | undefined;\n\n  constructor(element: HTMLSelectElement, params: UxSelectParams = {}) {\n    this.el = element;\n\n    this.config = {\n      isSearchable:\n        this.el.dataset.isSearchable !== undefined\n          ? this.el.dataset.isSearchable === 'true'\n          : params.isSearchable ?? false,\n      isSearchFocus:\n        this.el.dataset.isSearchFocus !== undefined\n          ? this.el.dataset.isSearchFocus === 'true'\n          : params.isSearchFocus ?? false,\n      isGroupOptions:\n        this.el.dataset.isGroupOptions !== undefined\n          ? this.el.dataset.isGroupOptions === 'true'\n          : params.isGroupOptions ?? false,\n      hideOnClear:\n        this.el.dataset.hideOnClear !== undefined ? this.el.dataset.hideOnClear === 'true' : params.hideOnClear ?? true,\n      hideOnSelect:\n        this.el.dataset.hideOnSelect !== undefined\n          ? this.el.dataset.hideOnSelect === 'true'\n          : params.hideOnSelect ?? false,\n      optionStyle: this.el.dataset.optionStyle ?? params.optionStyle ?? 'default',\n      closeButton:\n        this.el.dataset.closeButton !== undefined ? this.el.dataset.closeButton === 'true' : params.closeButton ?? true,\n    };\n    this.localization = {\n      placeholder: this.el.dataset.placeholder ?? params.placeholder ?? 'Select an option',\n      searchText: this.el.dataset.searchText ?? params.searchText ?? 'Search',\n      clearText: this.el.dataset.clearText ?? params.clearText ?? 'Clear option(s)',\n      selectedText: this.el.dataset.selectedText ?? params.selectedText ?? 'Selected:',\n    };\n    this.state = {\n      multiple: this.el.multiple,\n      disabled: this.el.disabled,\n    };\n\n    this.options = this.extractOptions();\n    this.groups = this.extractGroups();\n\n    this.uxEl = this.create();\n\n    this.setSelectState();\n    this.bindEvents();\n  }\n\n  private extractOptions(isUpdate = false): UxSelectOptions[] {\n    const options: HTMLOptionsCollection = this.el.options;\n    const isGroupingEnabled = this.config.isGroupOptions;\n    const optionsData: UxSelectOptions[] = [];\n\n    for (const option of options) {\n      if (option.value === '') continue;\n\n      let group = 'empty';\n      if (isGroupingEnabled && option.dataset.uxSelectGroup) {\n        group = option.dataset.uxSelectGroup;\n      }\n\n      let uxOption = undefined;\n      if (isUpdate) {\n        uxOption = this.uxEl.querySelector(`.ux-select-group__elem[data-value='${option.value}']`);\n      }\n\n      let optionImage = undefined;\n      if (this.config.optionStyle === 'image' && option.dataset.imageSrc) {\n        optionImage = {\n          src: option.dataset.imageSrc,\n          srcset: option.dataset.imageSrcset ?? undefined,\n          alt: option.dataset.imageAlt ?? '',\n          width: option.dataset.imageWidth ? Number(option.dataset.imageWidth) : 24,\n          height: option.dataset.imageHeight ? Number(option.dataset.imageHeight) : 24,\n        };\n      }\n\n      optionsData.push(<UxSelectOptions>{\n        attributes: {\n          selected: option.selected,\n          disabled: option.disabled,\n          group,\n        },\n        data: {\n          text: option.textContent ? option.textContent.trim() : '',\n          value: option.value,\n        },\n        image: optionImage,\n        element: option,\n        uxOption,\n      });\n    }\n\n    return optionsData;\n  }\n\n  private extractGroups(): string[] {\n    const options: HTMLOptionsCollection = this.el.options;\n    const isGroupingEnabled = this.config.isGroupOptions;\n    const uniqueGroups = new Set<string>();\n\n    for (const option of options) {\n      if (option.value === '') continue;\n\n      let group = 'empty';\n      if (isGroupingEnabled && option.dataset.uxSelectGroup) {\n        group = option.dataset.uxSelectGroup;\n      }\n      uniqueGroups.add(group);\n    }\n\n    return Array.from(uniqueGroups);\n  }\n\n  private setSelectState(): void {\n    const selectTitle = this.uxEl.querySelector('.ux-select__title') as Element;\n\n    const selectedTexts = this.options.reduce<string[]>((acc, item) => {\n      if (item.attributes.selected) acc.push(item.data.text);\n      return acc;\n    }, []);\n\n    if (selectedTexts.length > 0) {\n      if (selectedTexts.length === 1) {\n        selectTitle.textContent = selectedTexts[0];\n      } else if (this.state.multiple) {\n        selectTitle.textContent = `${this.localization.selectedText} ${selectedTexts.length}`;\n      }\n      this.uxEl.classList.add('-filled');\n    } else {\n      selectTitle.textContent = this.localization.placeholder;\n      this.uxEl.classList.remove('-filled');\n    }\n\n    if (this.config.isGroupOptions) {\n      for (const group of this.groups) {\n        const htmlGroup = this.uxEl.querySelector(`[data-ux-group=\"${group}\"]`);\n        if (!htmlGroup) continue;\n\n        const groupList = htmlGroup.querySelector('.ux-select-group__list');\n        if (!groupList) continue;\n\n        const groupElements = Array.from(groupList.querySelectorAll('.ux-select-group__elem'));\n        const isAllDisabled = groupElements.every((elem) => {\n          elem.classList.contains('-disabled');\n        });\n        htmlGroup.classList.toggle('-disabled', isAllDisabled);\n      }\n    }\n  }\n\n  private createGroupElement(group: string): HTMLElement {\n    const selectGroup = document.createElement('div');\n    selectGroup.classList.add('ux-select__group', 'ux-select-group');\n    selectGroup.dataset.uxGroup = group;\n\n    if (group === 'empty') {\n      selectGroup.classList.add('-empty');\n    } else {\n      const selectGroupTitle = document.createElement('div');\n      selectGroupTitle.classList.add('ux-select-group__title');\n      selectGroupTitle.textContent = group;\n      selectGroup.appendChild(selectGroupTitle);\n    }\n\n    const selectGroupList = document.createElement('ul');\n    selectGroupList.classList.add('ux-select-group__list');\n    selectGroup.appendChild(selectGroupList);\n\n    return selectGroup;\n  }\n\n  private createGroupAndOptions() {\n    const selectList = document.createElement('div');\n    selectList.classList.add('ux-select__dropdown');\n\n    const groupFragment = document.createDocumentFragment();\n    const optionsFragmentsByGroup: { [key: string]: DocumentFragment } = {};\n\n    for (const group of this.groups) {\n      const selectGroup = this.createGroupElement(group);\n      groupFragment.appendChild(selectGroup);\n\n      optionsFragmentsByGroup[group] = document.createDocumentFragment();\n    }\n\n    selectList.appendChild(groupFragment);\n\n    for (const option of this.options) {\n      const selectListElem = document.createElement('li');\n      selectListElem.classList.add('ux-select-group__elem');\n      selectListElem.dataset.value = option.data.value;\n      selectListElem.textContent = option.data.text;\n\n      if (option.attributes.selected) {\n        selectListElem.classList.add('-selected');\n      }\n\n      if (option.attributes.disabled) {\n        selectListElem.classList.add('-disabled');\n      }\n\n      if (this.config.optionStyle === 'image' && option.image) {\n        const optionImageElem = document.createElement('img');\n        optionImageElem.classList.add('ux-select-group-elem__image');\n        optionImageElem.src = option.image.src;\n        optionImageElem.width = option.image.width;\n        optionImageElem.height = option.image.height;\n        optionImageElem.alt = option.image.alt;\n\n        if (option.image.srcset) {\n          optionImageElem.srcset = `${option.image.src} 1x, ${option.image.srcset} 2x`;\n        }\n\n        selectListElem.appendChild(optionImageElem);\n      }\n\n      selectListElem.addEventListener('click', this.onClickOption.bind(this));\n\n      optionsFragmentsByGroup[option.attributes.group].appendChild(selectListElem);\n\n      option.uxOption = selectListElem;\n    }\n\n    for (const group of this.groups) {\n      const fragment = optionsFragmentsByGroup[group];\n      const selectGroupList = selectList.querySelector(`[data-ux-group=\"${group}\"] .ux-select-group__list`);\n\n      if (selectGroupList) selectGroupList.appendChild(fragment);\n    }\n\n    if (!this.uxBody) throw new Error('uxBody is undefined');\n\n    const replacementChildIndex = this.config.isSearchable ? 1 : 0;\n    if (this.uxBody.childNodes[replacementChildIndex]) {\n      this.uxBody.replaceChild(selectList, this.uxBody.childNodes[replacementChildIndex]);\n    } else {\n      this.uxBody.appendChild(selectList);\n    }\n  }\n\n  private create(): Element {\n    /** Create select head */\n    const selectHead = document.createElement('div');\n    selectHead.classList.add('ux-select__head');\n\n    const selectTitle = document.createElement('div');\n    selectTitle.classList.add('ux-select__title');\n    selectTitle.textContent = this.localization.placeholder;\n    selectHead.appendChild(selectTitle);\n\n    if (this.config.closeButton) {\n      const selectClear = document.createElement('button');\n      selectClear.type = 'button';\n      selectClear.classList.add('ux-select__clear');\n      selectClear.title = this.localization.clearText;\n      this.uxClearButton = selectClear;\n      selectHead.appendChild(selectClear);\n    }\n\n    /** Create body */\n    const selectBody = document.createElement('div');\n    selectBody.classList.add('ux-select__body');\n    this.uxBody = selectBody;\n\n    if (this.config.isSearchable) {\n      const selectSearchWrap = document.createElement('div');\n      selectSearchWrap.classList.add('ux-select__search');\n\n      const selectSearch = document.createElement('input');\n      selectSearch.type = 'search';\n      selectSearch.classList.add('ux-select-search__input');\n      selectSearch.placeholder = this.localization.searchText;\n      this.uxSearchInput = selectSearch;\n\n      selectSearchWrap.appendChild(selectSearch);\n      selectBody.appendChild(selectSearchWrap);\n    }\n\n    this.createGroupAndOptions();\n\n    /** Create select element */\n    const select = document.createElement('div');\n\n    /** Create class list for select element */\n    const classes = ['ux-select', this.el.classList];\n    if (this.state.multiple) classes.push('-multiple');\n    if (this.state.disabled) classes.push('-disabled');\n    if (this.config.optionStyle !== 'default') {\n      classes.push(`-${this.config.optionStyle}`);\n    }\n    select.className = classes.join(' ');\n\n    select.append(selectHead, selectBody);\n\n    this.el.style.display = 'none';\n    this.el.insertAdjacentElement('afterend', select);\n\n    return this.el.nextElementSibling as Element;\n  }\n\n  enable(): void {\n    if (this.state.disabled) {\n      this.el.disabled = false;\n      this.uxEl.classList.remove('-disabled');\n      this.state.disabled = false;\n    }\n  }\n\n  disable(): void {\n    if (!this.state.disabled) {\n      this.el.disabled = true;\n      this.uxEl.classList.add('-disabled');\n      this.state.disabled = true;\n    }\n  }\n\n  /**\n   *\n   * @param {Boolean} [isTriggerChange] Skip triggering \"change\" event\n   */\n  update(isTriggerChange: boolean = true): void {\n    const originalOptions = JSON.stringify(this.options);\n\n    this.options = this.extractOptions(true);\n    this.groups = this.extractGroups();\n\n    if (originalOptions !== JSON.stringify(this.options)) {\n      this.createGroupAndOptions();\n    }\n\n    this.setSelectState();\n\n    this.el.disabled ? this.disable() : this.enable();\n\n    if (isTriggerChange) triggerChange(this.el);\n  }\n\n  clear(): void {\n    for (const option of this.options) {\n      if (!option.attributes.selected) continue;\n\n      option.attributes.selected = false;\n      option.element.selected = false;\n      if (option.uxOption) option.uxOption.classList.remove('-selected');\n    }\n\n    this.setSelectState();\n\n    triggerChange(this.el);\n  }\n\n  destroy(): void {\n    this.uxEl.remove();\n    this.el.style.display = '';\n  }\n\n  private onToggleShown(e: Event): void {\n    e.preventDefault();\n    const targetEl = e.target as HTMLElement;\n\n    if (this.state.disabled) return;\n    if (this.uxClearButton && e.target === this.uxClearButton) return;\n    if (this.uxBody && this.uxBody.contains(targetEl)) return;\n\n    if (this.uxEl.classList.contains('-shown')) {\n      this.uxEl.classList.remove('-shown');\n      return;\n    }\n\n    this.uxEl.classList.add('-shown');\n    if (this.config.isSearchable && this.uxSearchInput) {\n      this.uxSearchInput.value = '';\n      this.uxSearchInput.dispatchEvent(new Event('input'));\n      if (this.config.isSearchFocus) this.uxSearchInput.focus();\n    }\n  }\n\n  private onClickOutside(e: Event): void {\n    const targetEl = e.target as HTMLElement;\n    if (!this.uxEl.contains(targetEl)) {\n      this.uxEl.classList.remove('-shown');\n    }\n  }\n\n  private onClickClear(e: Event): void {\n    e.preventDefault();\n\n    if (this.state.disabled) return;\n\n    if (this.config.hideOnClear) this.uxEl.classList.remove('-shown');\n\n    return this.clear();\n  }\n\n  private onClickOption(e: Event): void {\n    e.preventDefault();\n\n    const uxOption = e.target as HTMLElement;\n    if (uxOption.classList.contains('-disabled')) return;\n    if (!this.state.multiple && uxOption.classList.contains('-selected')) {\n      return;\n    }\n\n    if (this.state.multiple) {\n      e.stopPropagation();\n\n      const matchingOption = this.options.find((option) => {\n        return option.uxOption === uxOption;\n      });\n\n      if (matchingOption && matchingOption.uxOption) {\n        matchingOption.attributes.selected = !matchingOption.attributes.selected;\n        matchingOption.element.selected = matchingOption.attributes.selected;\n\n        matchingOption.uxOption.classList.toggle('-selected');\n      }\n    } else {\n      for (const option of this.options) {\n        const isSelected = option.uxOption === uxOption;\n        option.attributes.selected = isSelected;\n        option.element.selected = isSelected;\n\n        if (option.uxOption) {\n          option.uxOption.classList.toggle('-selected', isSelected);\n        }\n      }\n    }\n\n    if (this.config.hideOnSelect) this.uxEl.classList.remove('-shown');\n\n    return this.update();\n  }\n\n  private onSearch(e: Event): void {\n    if (e.target === null) return;\n\n    const input = e.target as HTMLInputElement;\n    const text = input.value.toLowerCase();\n    const escapedText = text.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n    const groups: NodeListOf<HTMLElement> = this.uxEl.querySelectorAll('.ux-select-group');\n\n    if (text === '') {\n      for (const option of this.options) {\n        if (option.uxOption) option.uxOption.style.display = '';\n      }\n\n      if (this.config.isGroupOptions) {\n        for (const group of groups) {\n          group.style.display = '';\n        }\n      }\n\n      return;\n    }\n\n    const searchValue = new RegExp(escapedText);\n\n    for (const option of this.options) {\n      const match = searchValue.test(option.data.text.toLowerCase());\n      if (option.uxOption) option.uxOption.style.display = match ? '' : 'none';\n    }\n\n    if (this.config.isGroupOptions) {\n      for (const group of groups) {\n        group.style.display = '';\n\n        const groupList = group.querySelector('.ux-select-group__list');\n        if (groupList) {\n          group.style.display = groupList.clientHeight !== 0 ? '' : 'none';\n        }\n      }\n    }\n\n    triggerInput(this.el);\n  }\n\n  private bindEvents(): void {\n    this.uxEl.addEventListener('click', this.onToggleShown.bind(this));\n\n    if (this.uxClearButton) {\n      this.uxClearButton.addEventListener('click', this.onClickClear.bind(this));\n    }\n\n    window.addEventListener('click', this.onClickOutside.bind(this));\n\n    if (this.config.isSearchable && this.uxSearchInput) {\n      this.uxSearchInput.addEventListener('input', this.onSearch.bind(this));\n    }\n  }\n}\n"],"names":["triggerChange","el","change","triggerInput","input","UxSelect","element","params","__publicField","isUpdate","options","isGroupingEnabled","optionsData","option","group","uxOption","optionImage","uniqueGroups","selectTitle","selectedTexts","acc","item","htmlGroup","groupList","isAllDisabled","elem","selectGroup","selectGroupTitle","selectGroupList","selectList","groupFragment","optionsFragmentsByGroup","selectListElem","optionImageElem","fragment","replacementChildIndex","selectHead","selectClear","selectBody","selectSearchWrap","selectSearch","select","classes","isTriggerChange","originalOptions","targetEl","matchingOption","isSelected","text","escapedText","groups","searchValue","match"],"mappings":"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"}