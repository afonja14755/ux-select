{"version":3,"file":"ux-select.iife.js","sources":["../../src/utils/events/triggerChange.ts","../../src/utils/events/triggerInput.ts","../../src/ux-select.ts"],"sourcesContent":["export function triggerChange(el: HTMLElement): void {\n  const change: Event = new Event('change')\n  el.dispatchEvent(change)\n}\n","export function triggerInput(el: HTMLElement): void {\n  const input: Event = new Event('input')\n  el.dispatchEvent(input)\n}\n","import './scss/ux-select.scss'\n\nimport { triggerChange, triggerInput } from './utils/events'\n\nimport {\n  UxSelectParams,\n  UxSelectOptions,\n  UxSelectConfig,\n  UxSelectLocalization,\n  UxSelectState\n} from './types'\n\n/**\n * @class\n * @classdesc Creating a custom select element with support for grouping, searching, and other features.\n * @param {HTMLSelectElement} element - The original HTML <select> element to be transformed.\n * @param {Partial<UxSelectParams>} [params={}] - Optional parameters for configuring the behavior and appearance of UxSelect.\n */\nexport default class UxSelect {\n  el: HTMLSelectElement\n\n  config: UxSelectConfig\n  localization: UxSelectLocalization\n  state: UxSelectState\n\n  options: UxSelectOptions[]\n  groups: string[]\n\n  uxEl: Element\n\n  private uxBody: HTMLDivElement | undefined\n  private uxSearchInput: HTMLInputElement | undefined\n  private uxClearButton: HTMLButtonElement | undefined\n  private uxSelectAll: HTMLDivElement | undefined\n\n  constructor(element: HTMLSelectElement, params: UxSelectParams = {}) {\n    this.el = element\n\n    this.config = {\n      isSearchable:\n        this.el.dataset.isSearchable !== undefined\n          ? this.el.dataset.isSearchable === 'true'\n          : (params.isSearchable ?? false),\n      isSearchFocus:\n        this.el.dataset.isSearchFocus !== undefined\n          ? this.el.dataset.isSearchFocus === 'true'\n          : (params.isSearchFocus ?? false),\n      searchName:\n        this.el.dataset.searchName !== undefined\n          ? this.el.dataset.searchName\n          : (params.searchName ?? ''),\n      isDisplaySelectedItems:\n        this.el.dataset.isDisplaySelectedItems !== undefined\n          ? this.el.dataset.isDisplaySelectedItems === 'true'\n          : (params.isDisplaySelectedItems ?? false),\n      isGroupOptions:\n        this.el.dataset.isGroupOptions !== undefined\n          ? this.el.dataset.isGroupOptions === 'true'\n          : (params.isGroupOptions ?? false),\n      hideOnClear:\n        this.el.dataset.hideOnClear !== undefined\n          ? this.el.dataset.hideOnClear === 'true'\n          : (params.hideOnClear ?? true),\n      hideOnSelect:\n        this.el.dataset.hideOnSelect !== undefined\n          ? this.el.dataset.hideOnSelect === 'true'\n          : (params.hideOnSelect ?? false),\n      optionStyle: this.el.dataset.optionStyle ?? params.optionStyle ?? 'default',\n      closeButton:\n        this.el.dataset.closeButton !== undefined\n          ? this.el.dataset.closeButton === 'true'\n          : (params.closeButton ?? true),\n      selectAllOption:\n        this.el.dataset.selectAllOption !== undefined\n          ? this.el.dataset.selectAllOption === 'true'\n          : (params.selectAllOption ?? false)\n    }\n    this.localization = {\n      placeholder: this.el.dataset.placeholder ?? params.placeholder ?? 'Select an option',\n      searchText: this.el.dataset.searchText ?? params.searchText ?? 'Search',\n      clearText: this.el.dataset.clearText ?? params.clearText ?? 'Clear option(s)',\n      selectedText: this.el.dataset.selectedText ?? params.selectedText ?? 'Selected:',\n      selectAllText: this.el.dataset.selectAllText ?? params.selectAllText ?? 'Select all'\n    }\n    this.state = {\n      multiple: this.el.multiple,\n      disabled: this.el.disabled,\n      isAllSelected: false\n    }\n\n    this.options = this.extractOptions()\n    this.groups = this.extractGroups()\n\n    this.uxEl = this.create()\n\n    this.setSelectState()\n    this.bindEvents()\n  }\n\n  private extractOptions(isUpdate = false): UxSelectOptions[] {\n    const options: HTMLOptionsCollection = this.el.options\n    const isGroupingEnabled = this.config.isGroupOptions\n    const optionsData: UxSelectOptions[] = []\n\n    for (const option of options) {\n      if (option.value === '') continue\n\n      let group = 'empty'\n      if (isGroupingEnabled && option.dataset.uxSelectGroup) {\n        group = option.dataset.uxSelectGroup\n      }\n\n      let uxOption = undefined\n      if (isUpdate) {\n        uxOption = this.uxEl.querySelector(`.ux-select-group__elem[data-value='${option.value}']`)\n      }\n\n      let optionImage = undefined\n      let optionSvg = undefined\n      if (this.config.optionStyle === 'image' && option.dataset.imageSrc) {\n        optionImage = {\n          src: option.dataset.imageSrc,\n          srcset: option.dataset.imageSrcset ?? undefined,\n          alt: option.dataset.imageAlt ?? '',\n          width: option.dataset.imageWidth ? Number(option.dataset.imageWidth) : 24,\n          height: option.dataset.imageHeight ? Number(option.dataset.imageHeight) : 24\n        }\n      } else if (this.config.optionStyle === 'image' && option.dataset.svgSrc) {\n        optionSvg = {\n          src: option.dataset.svgSrc,\n          width: option.dataset.svgWidth ? Number(option.dataset.svgWidth) : 24,\n          height: option.dataset.svgHeight ? Number(option.dataset.svgHeight) : 24\n        }\n      }\n\n      optionsData.push(<UxSelectOptions>{\n        attributes: {\n          selected: option.selected,\n          disabled: option.disabled,\n          group\n        },\n        data: {\n          text: option.textContent ? option.textContent.trim() : '',\n          value: option.value,\n          selectedDisplayText: option.dataset.selectedDisplayText\n        },\n        image: optionImage,\n        svg: optionSvg,\n        element: option,\n        uxOption\n      })\n    }\n\n    return optionsData\n  }\n\n  private extractGroups(): string[] {\n    const options: HTMLOptionsCollection = this.el.options\n    const isGroupingEnabled = this.config.isGroupOptions\n    const uniqueGroups = new Set<string>()\n\n    for (const option of options) {\n      if (option.value === '') continue\n\n      let group = 'empty'\n      if (isGroupingEnabled && option.dataset.uxSelectGroup) {\n        group = option.dataset.uxSelectGroup\n      }\n      uniqueGroups.add(group)\n    }\n\n    return Array.from(uniqueGroups)\n  }\n\n  private setSelectState(): void {\n    const selectTitle = this.uxEl.querySelector('.ux-select__title') as Element\n\n    const selectedTexts = this.options.reduce<string[]>((acc, item) => {\n      if (item.attributes.selected) acc.push(item.data.selectedDisplayText || item.data.text)\n      return acc\n    }, [])\n\n    if (selectedTexts.length > 0) {\n      if (selectedTexts.length === 1) {\n        selectTitle.textContent = selectedTexts[0]\n      } else if (this.state.multiple) {\n        selectTitle.textContent = this.config.isDisplaySelectedItems\n          ? selectedTexts.join(', ')\n          : `${this.localization.selectedText} ${selectedTexts.length}`\n      }\n      this.uxEl.classList.add('-filled')\n    } else {\n      selectTitle.textContent = this.localization.placeholder\n      this.uxEl.classList.remove('-filled')\n    }\n\n    if (this.config.isGroupOptions) {\n      for (const group of this.groups) {\n        const htmlGroup = this.uxEl.querySelector(`[data-ux-group=\"${group}\"]`)\n        if (!htmlGroup) continue\n\n        const groupList = htmlGroup.querySelector('.ux-select-group__list')\n        if (!groupList) continue\n\n        const groupElements = Array.from(groupList.querySelectorAll('.ux-select-group__elem'))\n        const isAllDisabled = groupElements.every((elem) => {\n          elem.classList.contains('-disabled')\n        })\n        htmlGroup.classList.toggle('-disabled', isAllDisabled)\n      }\n    }\n\n    if (this.uxSelectAll) {\n      this.uxSelectAll\n        .querySelector('.ux-select-select-all__checkbox')\n        ?.classList.remove('-null', '-all', '-some')\n\n      const allSelected = this.options.every((option) => option.attributes.selected)\n      const someSelected = this.options.some((option) => option.attributes.selected)\n\n      this.state.isAllSelected = allSelected\n\n      let selectAllClass = '-null'\n\n      if (allSelected) {\n        selectAllClass = '-all'\n      } else if (someSelected) {\n        selectAllClass = '-some'\n      }\n\n      this.uxSelectAll\n        .querySelector('.ux-select-select-all__checkbox')\n        ?.classList.add(selectAllClass)\n    }\n  }\n\n  private createGroupElement(group: string): HTMLElement {\n    const selectGroup = document.createElement('div')\n    selectGroup.classList.add('ux-select__group', 'ux-select-group')\n    selectGroup.dataset.uxGroup = group\n\n    if (group === 'empty') {\n      selectGroup.classList.add('-empty')\n    } else {\n      const selectGroupTitle = document.createElement('div')\n      selectGroupTitle.classList.add('ux-select-group__title')\n      selectGroupTitle.textContent = group\n      selectGroup.appendChild(selectGroupTitle)\n    }\n\n    const selectGroupList = document.createElement('ul')\n    selectGroupList.classList.add('ux-select-group__list')\n    selectGroup.appendChild(selectGroupList)\n\n    return selectGroup\n  }\n\n  private createGroupAndOptions() {\n    const selectList = document.createElement('div')\n    selectList.classList.add('ux-select__dropdown')\n\n    if (this.state.multiple && this.config.selectAllOption) {\n      const selectAllWrap = document.createElement('div')\n      selectAllWrap.classList.add('ux-select__select-all')\n\n      const selectAllCheckbox = document.createElement('div')\n      selectAllCheckbox.classList.add('ux-select-select-all__checkbox')\n\n      const selectAllText = document.createElement('div')\n      selectAllText.classList.add('ux-select-select-all__text')\n      selectAllText.textContent = this.localization.selectAllText\n\n      selectAllWrap.append(selectAllCheckbox, selectAllText)\n\n      this.uxSelectAll = selectAllWrap\n      this.uxSelectAll.addEventListener('click', this.onClickSelectAll.bind(this))\n      selectList.appendChild(selectAllWrap)\n    }\n\n    const groupFragment = document.createDocumentFragment()\n    const optionsFragmentsByGroup: { [key: string]: DocumentFragment } = {}\n\n    for (const group of this.groups) {\n      const selectGroup = this.createGroupElement(group)\n      groupFragment.appendChild(selectGroup)\n\n      optionsFragmentsByGroup[group] = document.createDocumentFragment()\n    }\n\n    selectList.appendChild(groupFragment)\n\n    for (const option of this.options) {\n      const selectListElem = document.createElement('li')\n      selectListElem.classList.add('ux-select-group__elem')\n      selectListElem.dataset.value = option.data.value\n      selectListElem.textContent = option.data.text\n\n      if (option.attributes.selected) selectListElem.classList.add('-selected')\n      if (option.attributes.disabled) selectListElem.classList.add('-disabled')\n\n      if (this.config.optionStyle === 'image' && option.image) {\n        const optionImageElem = document.createElement('img')\n        optionImageElem.classList.add('ux-select-group-elem__image')\n        optionImageElem.src = option.image.src\n        optionImageElem.width = option.image.width\n        optionImageElem.height = option.image.height\n        optionImageElem.alt = option.image.alt\n\n        if (option.image.srcset) {\n          optionImageElem.srcset = `${option.image.src} 1x, ${option.image.srcset} 2x`\n        }\n\n        selectListElem.appendChild(optionImageElem)\n      }\n\n      if (this.config.optionStyle === 'image' && option.svg) {\n        const optionSvgElem = document.createElementNS('http://www.w3.org/2000/svg', 'svg'),\n          optionUseElem = document.createElementNS('http://www.w3.org/2000/svg', 'use')\n\n        optionSvgElem.classList.add('ux-select-group-elem__image')\n        optionSvgElem.setAttribute(\n          'viewBox',\n          `0 0 ${String(option.svg.width)} ${String(option.svg.height)}`\n        )\n        optionSvgElem.setAttribute('width', String(option.svg.width))\n        optionSvgElem.setAttribute('height', String(option.svg.height))\n        optionUseElem.setAttribute('href', option.svg.src)\n\n        optionSvgElem.appendChild(optionUseElem)\n\n        selectListElem.appendChild(optionSvgElem)\n      }\n\n      selectListElem.addEventListener('click', this.onClickOption.bind(this))\n\n      optionsFragmentsByGroup[option.attributes.group].appendChild(selectListElem)\n\n      option.uxOption = selectListElem\n    }\n\n    for (const group of this.groups) {\n      const fragment = optionsFragmentsByGroup[group]\n      const selectGroupList = selectList.querySelector(\n        `[data-ux-group=\"${group}\"] .ux-select-group__list`\n      )\n\n      if (selectGroupList) selectGroupList.appendChild(fragment)\n    }\n\n    if (!this.uxBody) throw new Error('uxBody is undefined')\n\n    const replacementChildIndex = this.config.isSearchable ? 1 : 0\n    if (this.uxBody.childNodes[replacementChildIndex]) {\n      this.uxBody.replaceChild(selectList, this.uxBody.childNodes[replacementChildIndex])\n    } else {\n      this.uxBody.appendChild(selectList)\n    }\n  }\n\n  private create(): Element {\n    /** Create select head */\n    const selectHead = document.createElement('div')\n    selectHead.classList.add('ux-select__head')\n\n    const selectTitle = document.createElement('div')\n    selectTitle.classList.add('ux-select__title')\n    selectTitle.textContent = this.localization.placeholder\n    selectHead.appendChild(selectTitle)\n\n    if (this.config.closeButton) {\n      const selectClear = document.createElement('button')\n      selectClear.type = 'button'\n      selectClear.classList.add('ux-select__clear')\n      selectClear.title = this.localization.clearText\n      this.uxClearButton = selectClear\n      selectHead.appendChild(selectClear)\n    }\n\n    /** Create body */\n    const selectBody = document.createElement('div')\n    selectBody.classList.add('ux-select__body')\n    this.uxBody = selectBody\n\n    if (this.config.isSearchable) {\n      const selectSearchWrap = document.createElement('div')\n      selectSearchWrap.classList.add('ux-select__search')\n\n      const selectSearch = document.createElement('input')\n      selectSearch.type = 'search'\n      if (this.config.searchName) selectSearch.name = this.config.searchName\n      selectSearch.classList.add('ux-select-search__input')\n      selectSearch.placeholder = this.localization.searchText\n      this.uxSearchInput = selectSearch\n\n      selectSearchWrap.appendChild(selectSearch)\n      selectBody.appendChild(selectSearchWrap)\n    }\n\n    this.createGroupAndOptions()\n\n    /** Create select element */\n    const select = document.createElement('div')\n\n    /** Create class list for select element */\n    const classes = ['ux-select', this.el.classList]\n    if (this.state.multiple) classes.push('-multiple')\n    if (this.state.disabled) classes.push('-disabled')\n    if (this.config.optionStyle !== 'default') {\n      classes.push(`-${this.config.optionStyle}`)\n    }\n    select.className = classes.join(' ')\n\n    select.append(selectHead, selectBody)\n\n    this.el.style.display = 'none'\n    this.el.insertAdjacentElement('afterend', select)\n\n    return this.el.nextElementSibling as Element\n  }\n\n  enable(): void {\n    if (this.state.disabled) {\n      this.el.disabled = false\n      this.uxEl.classList.remove('-disabled')\n      this.state.disabled = false\n    }\n  }\n\n  disable(): void {\n    if (!this.state.disabled) {\n      this.el.disabled = true\n      this.uxEl.classList.add('-disabled')\n      this.state.disabled = true\n    }\n  }\n\n  /**\n   *\n   * @param {Boolean} [isTriggerChange] Skip triggering \"change\" event\n   */\n  update(isTriggerChange: boolean = true): void {\n    const originalOptions = JSON.stringify(this.options)\n\n    this.options = this.extractOptions(true)\n    this.groups = this.extractGroups()\n\n    if (originalOptions !== JSON.stringify(this.options)) {\n      this.createGroupAndOptions()\n    }\n\n    this.setSelectState()\n\n    if (this.el.disabled) {\n      this.disable()\n    } else {\n      this.enable()\n    }\n\n    if (isTriggerChange) triggerChange(this.el)\n  }\n\n  clear(): void {\n    for (const option of this.options) {\n      if (!option.attributes.selected) continue\n\n      option.attributes.selected = false\n      option.element.selected = false\n      if (option.uxOption) option.uxOption.classList.remove('-selected')\n    }\n\n    this.setSelectState()\n\n    triggerChange(this.el)\n  }\n\n  destroy(): void {\n    this.uxEl.remove()\n    this.el.style.display = ''\n  }\n\n  private onToggleShown(e: Event): void {\n    e.preventDefault()\n    const targetEl = e.target as HTMLElement\n\n    if (this.state.disabled) return\n    if (this.uxClearButton && e.target === this.uxClearButton) return\n    if (this.uxBody && this.uxBody.contains(targetEl)) return\n\n    if (this.uxEl.classList.contains('-shown')) {\n      this.uxEl.classList.remove('-shown')\n      return\n    }\n\n    this.uxEl.classList.add('-shown')\n    if (this.config.isSearchable && this.uxSearchInput) {\n      this.uxSearchInput.value = ''\n      this.uxSearchInput.dispatchEvent(new Event('input'))\n      if (this.config.isSearchFocus) this.uxSearchInput.focus()\n    }\n  }\n\n  private onClickOutside(e: Event): void {\n    const targetEl = e.target as HTMLElement\n    if (!this.uxEl.contains(targetEl)) {\n      this.uxEl.classList.remove('-shown')\n    }\n  }\n\n  private onClickClear(e: Event): void {\n    e.preventDefault()\n\n    if (this.state.disabled) return\n\n    if (this.config.hideOnClear) this.uxEl.classList.remove('-shown')\n\n    return this.clear()\n  }\n\n  private onClickSelectAll(e: Event): void {\n    e.preventDefault()\n\n    const allSelected = this.options.every((option) => option.attributes.selected)\n    for (const option of this.options) {\n      if (!option.attributes.disabled) {\n        option.attributes.selected = !allSelected\n        option.element.selected = !allSelected\n        option.uxOption?.classList.toggle('-selected', !allSelected)\n      }\n    }\n\n    if (this.config.hideOnSelect) this.uxEl.classList.remove('-shown')\n\n    return this.update()\n  }\n\n  private onClickOption(e: Event): void {\n    e.preventDefault()\n\n    const uxOption = e.target as HTMLElement\n    if (uxOption.classList.contains('-disabled')) return\n    if (!this.state.multiple && uxOption.classList.contains('-selected')) {\n      return\n    }\n\n    if (this.state.multiple) {\n      e.stopPropagation()\n\n      const matchingOption = this.options.find((option) => {\n        return option.uxOption === uxOption\n      })\n\n      if (matchingOption && matchingOption.uxOption) {\n        matchingOption.attributes.selected = !matchingOption.attributes.selected\n        matchingOption.element.selected = matchingOption.attributes.selected\n\n        matchingOption.uxOption.classList.toggle('-selected')\n      }\n    } else {\n      for (const option of this.options) {\n        const isSelected = option.uxOption === uxOption\n        option.attributes.selected = isSelected\n        option.element.selected = isSelected\n\n        if (option.uxOption) {\n          option.uxOption.classList.toggle('-selected', isSelected)\n        }\n      }\n    }\n\n    if (this.config.hideOnSelect) this.uxEl.classList.remove('-shown')\n\n    return this.update()\n  }\n\n  private onSearch(e: Event): void {\n    if (e.target === null) return\n\n    const normalizeText = (str: string): string =>\n      str\n        .toLowerCase()\n        .normalize('NFD')\n        .replace(/[\\u0300-\\u036f]/g, '')\n\n    const input = e.target as HTMLInputElement\n    const text = normalizeText(input.value)\n    const escapedText = text.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')\n    const groups: NodeListOf<HTMLElement> = this.uxEl.querySelectorAll('.ux-select-group')\n\n    if (text === '') {\n      for (const option of this.options) {\n        if (option.uxOption) option.uxOption.style.display = ''\n      }\n\n      if (this.config.isGroupOptions) {\n        for (const group of groups) {\n          group.style.display = ''\n        }\n      }\n\n      return\n    }\n\n    const searchValue = new RegExp(escapedText)\n\n    for (const option of this.options) {\n      const match = searchValue.test(normalizeText(option.data.text))\n      if (option.uxOption) option.uxOption.style.display = match ? '' : 'none'\n    }\n\n    if (this.config.isGroupOptions) {\n      for (const group of groups) {\n        group.style.display = ''\n\n        const groupList = group.querySelector('.ux-select-group__list')\n        if (groupList) {\n          group.style.display = groupList.clientHeight !== 0 ? '' : 'none'\n        }\n      }\n    }\n\n    triggerInput(this.el)\n  }\n\n  private bindEvents(): void {\n    this.uxEl.addEventListener('click', this.onToggleShown.bind(this))\n\n    if (this.uxClearButton) {\n      this.uxClearButton.addEventListener('click', this.onClickClear.bind(this))\n    }\n\n    window.addEventListener('click', this.onClickOutside.bind(this))\n\n    if (this.config.isSearchable && this.uxSearchInput) {\n      this.uxSearchInput.addEventListener('input', this.onSearch.bind(this))\n    }\n  }\n}\n"],"names":["triggerChange","el","change","triggerInput","input","UxSelect","element","params","__publicField","isUpdate","options","isGroupingEnabled","optionsData","option","group","uxOption","optionImage","optionSvg","uniqueGroups","selectTitle","selectedTexts","acc","item","htmlGroup","groupList","isAllDisabled","elem","allSelected","someSelected","selectAllClass","selectGroup","selectGroupTitle","selectGroupList","selectList","selectAllWrap","selectAllCheckbox","selectAllText","groupFragment","optionsFragmentsByGroup","selectListElem","optionImageElem","optionSvgElem","optionUseElem","fragment","replacementChildIndex","selectHead","selectClear","selectBody","selectSearchWrap","selectSearch","select","classes","isTriggerChange","originalOptions","e","targetEl","matchingOption","isSelected","normalizeText","str","text","escapedText","groups","searchValue","match"],"mappings":"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"}