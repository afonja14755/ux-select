{"version":3,"file":"ux-select.es.js","sources":["../../src/utils/events/triggerChange.ts","../../src/utils/events/triggerInput.ts","../../src/ux-select.ts"],"sourcesContent":["export default function triggerChange(el: HTMLElement): void {\n  const change: Event = new Event('change');\n  el.dispatchEvent(change);\n}\n","export default function triggerInput(el: HTMLElement): void {\n  const input: Event = new Event('input');\n  el.dispatchEvent(input);\n}\n","import './scss/ux-select.scss';\n\nimport { UxSelectParams, UxSelectOptions, UxSelectConfig, UxSelectLocalization, UxSelectState } from './types';\n\nimport triggerChange from './utils/events/triggerChange.ts';\nimport triggerInput from './utils/events/triggerInput.ts';\n\n/**\n * @class\n * @classdesc Creating a custom select element with support for grouping, searching, and other features.\n * @param {HTMLSelectElement} element - The original HTML <select> element to be transformed.\n * @param {Partial<UxSelectParams>} [params={}] - Optional parameters for configuring the behavior and appearance of UxSelect.\n */\nexport default class UxSelect {\n  el: HTMLSelectElement;\n\n  config: UxSelectConfig;\n  localization: UxSelectLocalization;\n  state: UxSelectState;\n\n  options: UxSelectOptions[];\n  groups: string[];\n\n  uxEl: Element;\n\n  private uxBody: HTMLDivElement | undefined;\n  private uxSearchInput: HTMLInputElement | undefined;\n  private uxClearButton: HTMLButtonElement | undefined;\n\n  constructor(element: HTMLSelectElement, params: Partial<UxSelectParams> = {}) {\n    this.el = element;\n\n    this.config = {\n      isSearchable: params.isSearchable ?? false,\n      isSearchFocus: params.isSearchFocus ?? false,\n      isGroupOptions: params.isGroupOptions ?? false,\n      optionStyle: params.optionStyle ?? 'default',\n      closeButton: params.closeButton ?? true,\n    };\n    this.localization = {\n      placeholder: this.el.dataset.placeholder ?? params.placeholder ?? 'Select an option',\n      searchText: this.el.dataset.searchText ?? params.searchText ?? 'Search',\n      clearText: this.el.dataset.clearText ?? params.clearText ?? 'Clear option(s)',\n      selectedText: this.el.dataset.selectedText ?? params.selectedText ?? 'Selected:',\n    };\n    this.state = {\n      multiple: this.el.multiple,\n      disabled: this.el.disabled,\n    };\n\n    this.options = this.extractOptions();\n    this.groups = this.extractGroups();\n\n    this.uxEl = this.create();\n\n    this.setSelectState();\n    this.bindEvents();\n  }\n\n  private extractOptions(isUpdate = false): UxSelectOptions[] {\n    const options: HTMLOptionsCollection = this.el.options;\n    const isGroupingEnabled = this.config.isGroupOptions;\n    const optionsData: UxSelectOptions[] = [];\n\n    for (const option of options) {\n      if (option.value === '') continue;\n\n      let group = 'empty';\n      if (isGroupingEnabled && option.dataset.uxSelectGroup) {\n        group = option.dataset.uxSelectGroup;\n      }\n\n      let uxOption = undefined;\n      if (isUpdate) {\n        uxOption = this.uxEl.querySelector(`.ux-select-group__elem[data-value='${option.value}']`);\n      }\n\n      optionsData.push(<UxSelectOptions>{\n        attributes: {\n          selected: option.selected,\n          disabled: option.disabled,\n          group,\n        },\n        data: {\n          text: option.textContent ? option.textContent.trim() : '',\n          value: option.value,\n        },\n        element: option,\n        uxOption,\n      });\n    }\n\n    return optionsData;\n  }\n\n  private extractGroups(): string[] {\n    const options: HTMLOptionsCollection = this.el.options;\n    const isGroupingEnabled = this.config.isGroupOptions;\n    const uniqueGroups = new Set<string>();\n\n    for (const option of options) {\n      if (option.value === '') continue;\n\n      let group = 'empty';\n      if (isGroupingEnabled && option.dataset.uxSelectGroup) {\n        group = option.dataset.uxSelectGroup;\n      }\n      uniqueGroups.add(group);\n    }\n\n    return Array.from(uniqueGroups);\n  }\n\n  private setSelectState(): void {\n    const selectTitle = this.uxEl.querySelector('.ux-select__title') as Element;\n\n    const selectedTexts = this.options.reduce<string[]>((acc, item) => {\n      if (item.attributes.selected) acc.push(item.data.text);\n      return acc;\n    }, []);\n\n    if (selectedTexts.length > 0) {\n      if (selectedTexts.length === 1) {\n        selectTitle.textContent = selectedTexts[0];\n      } else if (this.state.multiple) {\n        selectTitle.textContent = `${this.localization.selectedText} ${selectedTexts.length}`;\n      }\n      this.uxEl.classList.add('-filled');\n    } else {\n      selectTitle.textContent = this.localization.placeholder;\n      this.uxEl.classList.remove('-filled');\n    }\n\n    if (this.config.isGroupOptions) {\n      for (const group of this.groups) {\n        const htmlGroup = this.uxEl.querySelector(`[data-ux-group=\"${group}\"]`);\n        if (!htmlGroup) continue;\n\n        const groupList = htmlGroup.querySelector('.ux-select-group__list');\n        if (!groupList) continue;\n\n        const groupElements = Array.from(groupList.querySelectorAll('.ux-select-group__elem'));\n        const isAllDisabled = groupElements.every((elem) => {\n          elem.classList.contains('-disabled');\n        });\n        htmlGroup.classList.toggle('-disabled', isAllDisabled);\n      }\n    }\n  }\n\n  private createGroupElement(group: string): HTMLElement {\n    const selectGroup = document.createElement('div');\n    selectGroup.classList.add('ux-select__group', 'ux-select-group');\n    selectGroup.dataset.uxGroup = group;\n\n    if (group === 'empty') {\n      selectGroup.classList.add('-empty');\n    } else {\n      const selectGroupTitle = document.createElement('div');\n      selectGroupTitle.classList.add('ux-select-group__title');\n      selectGroupTitle.textContent = group;\n      selectGroup.appendChild(selectGroupTitle);\n    }\n\n    const selectGroupList = document.createElement('ul');\n    selectGroupList.classList.add('ux-select-group__list');\n    selectGroup.appendChild(selectGroupList);\n\n    return selectGroup;\n  }\n\n  private createGroupAndOptions() {\n    const selectList = document.createElement('div');\n    selectList.classList.add('ux-select__dropdown');\n\n    const groupFragment = document.createDocumentFragment();\n    const optionsFragmentsByGroup: { [key: string]: DocumentFragment } = {};\n\n    for (const group of this.groups) {\n      const selectGroup = this.createGroupElement(group);\n      groupFragment.appendChild(selectGroup);\n\n      optionsFragmentsByGroup[group] = document.createDocumentFragment();\n    }\n\n    selectList.appendChild(groupFragment);\n\n    for (const option of this.options) {\n      const selectListElem = document.createElement('li');\n      selectListElem.classList.add('ux-select-group__elem');\n      selectListElem.dataset.value = option.data.value;\n      selectListElem.textContent = option.data.text;\n\n      if (option.attributes.selected) {\n        selectListElem.classList.add('-selected');\n      }\n\n      if (option.attributes.disabled) {\n        selectListElem.classList.add('-disabled');\n      }\n\n      selectListElem.addEventListener('click', this.onClickOption.bind(this));\n\n      optionsFragmentsByGroup[option.attributes.group].appendChild(selectListElem);\n\n      option.uxOption = selectListElem;\n    }\n\n    for (const group of this.groups) {\n      const fragment = optionsFragmentsByGroup[group];\n      const selectGroupList = selectList.querySelector(`[data-ux-group=\"${group}\"] .ux-select-group__list`);\n\n      if (selectGroupList) selectGroupList.appendChild(fragment);\n    }\n\n    if (!this.uxBody) throw new Error('uxBody is undefined');\n    if (this.uxBody.childNodes[1]) {\n      this.uxBody.replaceChild(selectList, this.uxBody.childNodes[1]);\n    } else {\n      this.uxBody.appendChild(selectList);\n    }\n  }\n\n  private create(): Element {\n    /** Create select head */\n    const selectHead = document.createElement('div');\n    selectHead.classList.add('ux-select__head');\n\n    const selectTitle = document.createElement('div');\n    selectTitle.classList.add('ux-select__title');\n    selectTitle.textContent = this.localization.placeholder;\n    selectHead.appendChild(selectTitle);\n\n    if (this.config.closeButton) {\n      const selectClear = document.createElement('button');\n      selectClear.type = 'button';\n      selectClear.classList.add('ux-select__clear');\n      selectClear.title = this.localization.clearText;\n      this.uxClearButton = selectClear;\n      selectHead.appendChild(selectClear);\n    }\n\n    /** Create body */\n    const selectBody = document.createElement('div');\n    selectBody.classList.add('ux-select__body');\n    this.uxBody = selectBody;\n\n    if (this.config.isSearchable) {\n      const selectSearchWrap = document.createElement('div');\n      selectSearchWrap.classList.add('ux-select__search');\n\n      const selectSearch = document.createElement('input');\n      selectSearch.type = 'search';\n      selectSearch.classList.add('ux-select-search__input');\n      selectSearch.placeholder = this.localization.searchText;\n      this.uxSearchInput = selectSearch;\n\n      selectSearchWrap.appendChild(selectSearch);\n      selectBody.appendChild(selectSearchWrap);\n    }\n\n    this.createGroupAndOptions();\n\n    /** Create select element */\n    const select = document.createElement('div');\n\n    /** Create class list for select element */\n    const classes = ['ux-select', this.el.classList];\n    if (this.state.multiple) classes.push('-multiple');\n    if (this.state.disabled) classes.push('-disabled');\n    if (this.config.optionStyle !== 'default') {\n      classes.push(`-${this.config.optionStyle}`);\n    }\n    select.className = classes.join(' ');\n\n    select.append(selectHead, selectBody);\n\n    this.el.style.display = 'none';\n    this.el.insertAdjacentElement('afterend', select);\n\n    return this.el.nextElementSibling as Element;\n  }\n\n  enable(): void {\n    if (this.state.disabled) {\n      this.el.disabled = false;\n      this.uxEl.classList.remove('-disabled');\n      this.state.disabled = false;\n    }\n  }\n\n  disable(): void {\n    if (!this.state.disabled) {\n      this.el.disabled = true;\n      this.uxEl.classList.add('-disabled');\n      this.state.disabled = true;\n    }\n  }\n\n  /**\n   *\n   * @param {Boolean} [isTriggerChange] Skip triggering \"change\" event\n   */\n  update(isTriggerChange: boolean = true): void {\n    const originalOptions = JSON.stringify(this.options);\n\n    this.options = this.extractOptions(true);\n    this.groups = this.extractGroups();\n\n    if (originalOptions !== JSON.stringify(this.options)) {\n      this.createGroupAndOptions();\n    }\n\n    this.setSelectState();\n\n    this.el.disabled ? this.disable() : this.enable();\n\n    if (isTriggerChange) triggerChange(this.el);\n  }\n\n  clear(): void {\n    for (const option of this.options) {\n      if (!option.attributes.selected) continue;\n\n      option.attributes.selected = false;\n      option.element.selected = false;\n      if (option.uxOption) option.uxOption.classList.remove('-selected');\n    }\n\n    this.setSelectState();\n\n    triggerChange(this.el);\n  }\n\n  destroy(): void {\n    this.uxEl.remove();\n    this.el.style.display = '';\n  }\n\n  private onToggleShown(e: Event): void {\n    e.preventDefault();\n    const targetEl = e.target as HTMLElement;\n\n    if (this.state.disabled) return;\n    if (this.uxClearButton && e.target === this.uxClearButton) return;\n    if (this.uxBody && this.uxBody.contains(targetEl)) return;\n\n    if (this.uxEl.classList.contains('-shown')) {\n      this.uxEl.classList.remove('-shown');\n      return;\n    }\n\n    this.uxEl.classList.add('-shown');\n    if (this.config.isSearchable && this.uxSearchInput) {\n      this.uxSearchInput.value = '';\n      this.uxSearchInput.dispatchEvent(new Event('input'));\n      if (this.config.isSearchFocus) this.uxSearchInput.focus();\n    }\n  }\n\n  private onClickOutside(e: Event): void {\n    const targetEl = e.target as HTMLElement;\n    if (!this.uxEl.contains(targetEl)) {\n      this.uxEl.classList.remove('-shown');\n    }\n  }\n\n  private onClickClear(e: Event): void {\n    e.preventDefault();\n\n    if (this.state.disabled) return;\n\n    return this.clear();\n  }\n\n  private onClickOption(e: Event): void {\n    e.preventDefault();\n\n    const uxOption = e.target as HTMLElement;\n    if (uxOption.classList.contains('-disabled')) return;\n    if (!this.state.multiple && uxOption.classList.contains('-selected')) {\n      return;\n    }\n\n    if (this.state.multiple) {\n      e.stopPropagation();\n\n      const matchingOption = this.options.find((option) => {\n        return option.uxOption === uxOption;\n      });\n\n      if (matchingOption && matchingOption.uxOption) {\n        matchingOption.attributes.selected = !matchingOption.attributes.selected;\n        matchingOption.element.selected = matchingOption.attributes.selected;\n\n        matchingOption.uxOption.classList.toggle('-selected');\n      }\n    } else {\n      for (const option of this.options) {\n        const isSelected = option.uxOption === uxOption;\n        option.attributes.selected = isSelected;\n        option.element.selected = isSelected;\n\n        if (option.uxOption) {\n          option.uxOption.classList.toggle('-selected', isSelected);\n        }\n      }\n    }\n\n    return this.update();\n  }\n\n  private onSearch(e: Event): void {\n    if (e.target === null) return;\n\n    const input = e.target as HTMLInputElement;\n    const text = input.value.toLowerCase();\n    const escapedText = text.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n    const groups: NodeListOf<HTMLElement> = this.uxEl.querySelectorAll('.ux-select-group');\n\n    if (text === '') {\n      for (const option of this.options) {\n        if (option.uxOption) option.uxOption.style.display = '';\n      }\n\n      if (this.config.isGroupOptions) {\n        for (const group of groups) {\n          group.style.display = '';\n        }\n      }\n\n      return;\n    }\n\n    const searchValue = new RegExp(escapedText);\n\n    for (const option of this.options) {\n      const match = searchValue.test(option.data.text.toLowerCase());\n      if (option.uxOption) option.uxOption.style.display = match ? '' : 'none';\n    }\n\n    if (this.config.isGroupOptions) {\n      for (const group of groups) {\n        group.style.display = '';\n\n        const groupList = group.querySelector('.ux-select-group__list');\n        if (groupList) {\n          group.style.display = groupList.clientHeight !== 0 ? '' : 'none';\n        }\n      }\n    }\n\n    triggerInput(this.el);\n  }\n\n  private bindEvents(): void {\n    this.uxEl.addEventListener('click', this.onToggleShown.bind(this));\n\n    if (this.uxClearButton) {\n      this.uxClearButton.addEventListener('click', this.onClickClear.bind(this));\n    }\n\n    window.addEventListener('click', this.onClickOutside.bind(this));\n\n    if (this.config.isSearchable && this.uxSearchInput) {\n      this.uxSearchInput.addEventListener('input', this.onSearch.bind(this));\n    }\n  }\n}\n"],"names":["triggerChange","el","change","triggerInput","input","UxSelect","element","params","__publicField","isUpdate","options","isGroupingEnabled","optionsData","option","group","uxOption","uniqueGroups","selectTitle","selectedTexts","acc","item","htmlGroup","groupList","isAllDisabled","elem","selectGroup","selectGroupTitle","selectGroupList","selectList","groupFragment","optionsFragmentsByGroup","selectListElem","fragment","selectHead","selectClear","selectBody","selectSearchWrap","selectSearch","select","classes","isTriggerChange","originalOptions","e","targetEl","matchingOption","isSelected","text","escapedText","groups","searchValue","match"],"mappings":"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"}