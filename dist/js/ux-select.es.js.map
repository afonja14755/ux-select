{"version":3,"file":"ux-select.es.js","sources":["../../src/utils/events/triggerChange.ts","../../src/utils/events/triggerInput.ts","../../src/ux-select.ts"],"sourcesContent":["export function triggerChange(el: HTMLElement): void {\n  const change: Event = new Event('change')\n  el.dispatchEvent(change)\n}\n","export function triggerInput(el: HTMLElement): void {\n  const input: Event = new Event('input')\n  el.dispatchEvent(input)\n}\n","import './scss/ux-select.scss'\n\nimport { triggerChange, triggerInput } from './utils/events'\n\nimport {\n  UxSelectParams,\n  UxSelectOptions,\n  UxSelectConfig,\n  UxSelectLocalization,\n  UxSelectState\n} from './types'\n\n/**\n * @class\n * @classdesc Creating a custom select element with support for grouping, searching, and other features.\n * @param {HTMLSelectElement} element - The original HTML <select> element to be transformed.\n * @param {Partial<UxSelectParams>} [params={}] - Optional parameters for configuring the behavior and appearance of UxSelect.\n */\nexport default class UxSelect {\n  el: HTMLSelectElement\n\n  config: UxSelectConfig\n  localization: UxSelectLocalization\n  state: UxSelectState\n\n  options: UxSelectOptions[]\n  groups: string[]\n\n  uxEl: Element\n\n  private uxBody: HTMLDivElement | undefined\n  private uxSearchInput: HTMLInputElement | undefined\n  private uxClearButton: HTMLButtonElement | undefined\n  private uxSelectAll: HTMLDivElement | undefined\n\n  constructor(element: HTMLSelectElement, params: UxSelectParams = {}) {\n    this.el = element\n\n    this.config = {\n      isSearchable:\n        this.el.dataset.isSearchable !== undefined\n          ? this.el.dataset.isSearchable === 'true'\n          : (params.isSearchable ?? false),\n      isSearchFocus:\n        this.el.dataset.isSearchFocus !== undefined\n          ? this.el.dataset.isSearchFocus === 'true'\n          : (params.isSearchFocus ?? false),\n      isGroupOptions:\n        this.el.dataset.isGroupOptions !== undefined\n          ? this.el.dataset.isGroupOptions === 'true'\n          : (params.isGroupOptions ?? false),\n      hideOnClear:\n        this.el.dataset.hideOnClear !== undefined\n          ? this.el.dataset.hideOnClear === 'true'\n          : (params.hideOnClear ?? true),\n      hideOnSelect:\n        this.el.dataset.hideOnSelect !== undefined\n          ? this.el.dataset.hideOnSelect === 'true'\n          : (params.hideOnSelect ?? false),\n      optionStyle: this.el.dataset.optionStyle ?? params.optionStyle ?? 'default',\n      closeButton:\n        this.el.dataset.closeButton !== undefined\n          ? this.el.dataset.closeButton === 'true'\n          : (params.closeButton ?? true),\n      selectAllOption:\n        this.el.dataset.selectAllOption !== undefined\n          ? this.el.dataset.selectAllOption === 'true'\n          : (params.selectAllOption ?? false)\n    }\n    this.localization = {\n      placeholder: this.el.dataset.placeholder ?? params.placeholder ?? 'Select an option',\n      searchText: this.el.dataset.searchText ?? params.searchText ?? 'Search',\n      clearText: this.el.dataset.clearText ?? params.clearText ?? 'Clear option(s)',\n      selectedText: this.el.dataset.selectedText ?? params.selectedText ?? 'Selected:',\n      selectAllText: this.el.dataset.selectAllText ?? params.selectAllText ?? 'Select all'\n    }\n    this.state = {\n      multiple: this.el.multiple,\n      disabled: this.el.disabled,\n      isAllSelected: false\n    }\n\n    this.options = this.extractOptions()\n    this.groups = this.extractGroups()\n\n    this.uxEl = this.create()\n\n    this.setSelectState()\n    this.bindEvents()\n  }\n\n  private extractOptions(isUpdate = false): UxSelectOptions[] {\n    const options: HTMLOptionsCollection = this.el.options\n    const isGroupingEnabled = this.config.isGroupOptions\n    const optionsData: UxSelectOptions[] = []\n\n    for (const option of options) {\n      if (option.value === '') continue\n\n      let group = 'empty'\n      if (isGroupingEnabled && option.dataset.uxSelectGroup) {\n        group = option.dataset.uxSelectGroup\n      }\n\n      let uxOption = undefined\n      if (isUpdate) {\n        uxOption = this.uxEl.querySelector(`.ux-select-group__elem[data-value='${option.value}']`)\n      }\n\n      let optionImage = undefined\n      let optionSvg = undefined\n      if (this.config.optionStyle === 'image' && option.dataset.imageSrc) {\n        optionImage = {\n          src: option.dataset.imageSrc,\n          srcset: option.dataset.imageSrcset ?? undefined,\n          alt: option.dataset.imageAlt ?? '',\n          width: option.dataset.imageWidth ? Number(option.dataset.imageWidth) : 24,\n          height: option.dataset.imageHeight ? Number(option.dataset.imageHeight) : 24\n        }\n      } else if (this.config.optionStyle === 'image' && option.dataset.svgSrc) {\n        optionSvg = {\n          src: option.dataset.svgSrc,\n          width: option.dataset.svgWidth ? Number(option.dataset.svgWidth) : 24,\n          height: option.dataset.svgHeight ? Number(option.dataset.svgHeight) : 24\n        }\n      }\n\n      optionsData.push(<UxSelectOptions>{\n        attributes: {\n          selected: option.selected,\n          disabled: option.disabled,\n          group\n        },\n        data: {\n          text: option.textContent ? option.textContent.trim() : '',\n          value: option.value\n        },\n        image: optionImage,\n        svg: optionSvg,\n        element: option,\n        uxOption\n      })\n    }\n\n    return optionsData\n  }\n\n  private extractGroups(): string[] {\n    const options: HTMLOptionsCollection = this.el.options\n    const isGroupingEnabled = this.config.isGroupOptions\n    const uniqueGroups = new Set<string>()\n\n    for (const option of options) {\n      if (option.value === '') continue\n\n      let group = 'empty'\n      if (isGroupingEnabled && option.dataset.uxSelectGroup) {\n        group = option.dataset.uxSelectGroup\n      }\n      uniqueGroups.add(group)\n    }\n\n    return Array.from(uniqueGroups)\n  }\n\n  private setSelectState(): void {\n    const selectTitle = this.uxEl.querySelector('.ux-select__title') as Element\n\n    const selectedTexts = this.options.reduce<string[]>((acc, item) => {\n      if (item.attributes.selected) acc.push(item.data.text)\n      return acc\n    }, [])\n\n    if (selectedTexts.length > 0) {\n      if (selectedTexts.length === 1) {\n        selectTitle.textContent = selectedTexts[0]\n      } else if (this.state.multiple) {\n        selectTitle.textContent = `${this.localization.selectedText} ${selectedTexts.length}`\n      }\n      this.uxEl.classList.add('-filled')\n    } else {\n      selectTitle.textContent = this.localization.placeholder\n      this.uxEl.classList.remove('-filled')\n    }\n\n    if (this.config.isGroupOptions) {\n      for (const group of this.groups) {\n        const htmlGroup = this.uxEl.querySelector(`[data-ux-group=\"${group}\"]`)\n        if (!htmlGroup) continue\n\n        const groupList = htmlGroup.querySelector('.ux-select-group__list')\n        if (!groupList) continue\n\n        const groupElements = Array.from(groupList.querySelectorAll('.ux-select-group__elem'))\n        const isAllDisabled = groupElements.every((elem) => {\n          elem.classList.contains('-disabled')\n        })\n        htmlGroup.classList.toggle('-disabled', isAllDisabled)\n      }\n    }\n\n    if (this.uxSelectAll) {\n      this.uxSelectAll\n        .querySelector('.ux-select-select-all__checkbox')\n        ?.classList.remove('-null', '-all', '-some')\n\n      const allSelected = this.options.every((option) => option.attributes.selected)\n      const someSelected = this.options.some((option) => option.attributes.selected)\n\n      this.state.isAllSelected = allSelected\n\n      let selectAllClass = '-null'\n\n      if (allSelected) {\n        selectAllClass = '-all'\n      } else if (someSelected) {\n        selectAllClass = '-some'\n      }\n\n      this.uxSelectAll\n        .querySelector('.ux-select-select-all__checkbox')\n        ?.classList.add(selectAllClass)\n    }\n  }\n\n  private createGroupElement(group: string): HTMLElement {\n    const selectGroup = document.createElement('div')\n    selectGroup.classList.add('ux-select__group', 'ux-select-group')\n    selectGroup.dataset.uxGroup = group\n\n    if (group === 'empty') {\n      selectGroup.classList.add('-empty')\n    } else {\n      const selectGroupTitle = document.createElement('div')\n      selectGroupTitle.classList.add('ux-select-group__title')\n      selectGroupTitle.textContent = group\n      selectGroup.appendChild(selectGroupTitle)\n    }\n\n    const selectGroupList = document.createElement('ul')\n    selectGroupList.classList.add('ux-select-group__list')\n    selectGroup.appendChild(selectGroupList)\n\n    return selectGroup\n  }\n\n  private createGroupAndOptions() {\n    const selectList = document.createElement('div')\n    selectList.classList.add('ux-select__dropdown')\n\n    if (this.state.multiple && this.config.selectAllOption) {\n      const selectAllWrap = document.createElement('div')\n      selectAllWrap.classList.add('ux-select__select-all')\n\n      const selectAllCheckbox = document.createElement('div')\n      selectAllCheckbox.classList.add('ux-select-select-all__checkbox')\n\n      const selectAllText = document.createElement('div')\n      selectAllText.classList.add('ux-select-select-all__text')\n      selectAllText.textContent = this.localization.selectAllText\n\n      selectAllWrap.append(selectAllCheckbox, selectAllText)\n\n      this.uxSelectAll = selectAllWrap\n      this.uxSelectAll.addEventListener('click', this.onClickSelectAll.bind(this))\n      selectList.appendChild(selectAllWrap)\n    }\n\n    const groupFragment = document.createDocumentFragment()\n    const optionsFragmentsByGroup: { [key: string]: DocumentFragment } = {}\n\n    for (const group of this.groups) {\n      const selectGroup = this.createGroupElement(group)\n      groupFragment.appendChild(selectGroup)\n\n      optionsFragmentsByGroup[group] = document.createDocumentFragment()\n    }\n\n    selectList.appendChild(groupFragment)\n\n    for (const option of this.options) {\n      const selectListElem = document.createElement('li')\n      selectListElem.classList.add('ux-select-group__elem')\n      selectListElem.dataset.value = option.data.value\n      selectListElem.textContent = option.data.text\n\n      if (option.attributes.selected) selectListElem.classList.add('-selected')\n      if (option.attributes.disabled) selectListElem.classList.add('-disabled')\n\n      if (this.config.optionStyle === 'image' && option.image) {\n        const optionImageElem = document.createElement('img')\n        optionImageElem.classList.add('ux-select-group-elem__image')\n        optionImageElem.src = option.image.src\n        optionImageElem.width = option.image.width\n        optionImageElem.height = option.image.height\n        optionImageElem.alt = option.image.alt\n\n        if (option.image.srcset) {\n          optionImageElem.srcset = `${option.image.src} 1x, ${option.image.srcset} 2x`\n        }\n\n        selectListElem.appendChild(optionImageElem)\n      }\n\n      if (this.config.optionStyle === 'image' && option.svg) {\n        const optionSvgElem = document.createElementNS('http://www.w3.org/2000/svg', 'svg'),\n          optionUseElem = document.createElementNS('http://www.w3.org/2000/svg', 'use')\n\n        optionSvgElem.classList.add('ux-select-group-elem__image')\n        optionSvgElem.setAttribute(\n          'viewBox',\n          `0 0 ${String(option.svg.width)} ${String(option.svg.height)}`\n        )\n        optionSvgElem.setAttribute('width', String(option.svg.width))\n        optionSvgElem.setAttribute('height', String(option.svg.height))\n        optionUseElem.setAttribute('href', option.svg.src)\n\n        optionSvgElem.appendChild(optionUseElem)\n\n        selectListElem.appendChild(optionSvgElem)\n      }\n\n      selectListElem.addEventListener('click', this.onClickOption.bind(this))\n\n      optionsFragmentsByGroup[option.attributes.group].appendChild(selectListElem)\n\n      option.uxOption = selectListElem\n    }\n\n    for (const group of this.groups) {\n      const fragment = optionsFragmentsByGroup[group]\n      const selectGroupList = selectList.querySelector(\n        `[data-ux-group=\"${group}\"] .ux-select-group__list`\n      )\n\n      if (selectGroupList) selectGroupList.appendChild(fragment)\n    }\n\n    if (!this.uxBody) throw new Error('uxBody is undefined')\n\n    const replacementChildIndex = this.config.isSearchable ? 1 : 0\n    if (this.uxBody.childNodes[replacementChildIndex]) {\n      this.uxBody.replaceChild(selectList, this.uxBody.childNodes[replacementChildIndex])\n    } else {\n      this.uxBody.appendChild(selectList)\n    }\n  }\n\n  private create(): Element {\n    /** Create select head */\n    const selectHead = document.createElement('div')\n    selectHead.classList.add('ux-select__head')\n\n    const selectTitle = document.createElement('div')\n    selectTitle.classList.add('ux-select__title')\n    selectTitle.textContent = this.localization.placeholder\n    selectHead.appendChild(selectTitle)\n\n    if (this.config.closeButton) {\n      const selectClear = document.createElement('button')\n      selectClear.type = 'button'\n      selectClear.classList.add('ux-select__clear')\n      selectClear.title = this.localization.clearText\n      this.uxClearButton = selectClear\n      selectHead.appendChild(selectClear)\n    }\n\n    /** Create body */\n    const selectBody = document.createElement('div')\n    selectBody.classList.add('ux-select__body')\n    this.uxBody = selectBody\n\n    if (this.config.isSearchable) {\n      const selectSearchWrap = document.createElement('div')\n      selectSearchWrap.classList.add('ux-select__search')\n\n      const selectSearch = document.createElement('input')\n      selectSearch.type = 'search'\n      selectSearch.name = 'ux-select-search'\n      selectSearch.classList.add('ux-select-search__input')\n      selectSearch.placeholder = this.localization.searchText\n      this.uxSearchInput = selectSearch\n\n      selectSearchWrap.appendChild(selectSearch)\n      selectBody.appendChild(selectSearchWrap)\n    }\n\n    this.createGroupAndOptions()\n\n    /** Create select element */\n    const select = document.createElement('div')\n\n    /** Create class list for select element */\n    const classes = ['ux-select', this.el.classList]\n    if (this.state.multiple) classes.push('-multiple')\n    if (this.state.disabled) classes.push('-disabled')\n    if (this.config.optionStyle !== 'default') {\n      classes.push(`-${this.config.optionStyle}`)\n    }\n    select.className = classes.join(' ')\n\n    select.append(selectHead, selectBody)\n\n    this.el.style.display = 'none'\n    this.el.insertAdjacentElement('afterend', select)\n\n    return this.el.nextElementSibling as Element\n  }\n\n  enable(): void {\n    if (this.state.disabled) {\n      this.el.disabled = false\n      this.uxEl.classList.remove('-disabled')\n      this.state.disabled = false\n    }\n  }\n\n  disable(): void {\n    if (!this.state.disabled) {\n      this.el.disabled = true\n      this.uxEl.classList.add('-disabled')\n      this.state.disabled = true\n    }\n  }\n\n  /**\n   *\n   * @param {Boolean} [isTriggerChange] Skip triggering \"change\" event\n   */\n  update(isTriggerChange: boolean = true): void {\n    const originalOptions = JSON.stringify(this.options)\n\n    this.options = this.extractOptions(true)\n    this.groups = this.extractGroups()\n\n    if (originalOptions !== JSON.stringify(this.options)) {\n      this.createGroupAndOptions()\n    }\n\n    this.setSelectState()\n\n    if (this.el.disabled) {\n      this.disable()\n    } else {\n      this.enable()\n    }\n\n    if (isTriggerChange) triggerChange(this.el)\n  }\n\n  clear(): void {\n    for (const option of this.options) {\n      if (!option.attributes.selected) continue\n\n      option.attributes.selected = false\n      option.element.selected = false\n      if (option.uxOption) option.uxOption.classList.remove('-selected')\n    }\n\n    this.setSelectState()\n\n    triggerChange(this.el)\n  }\n\n  destroy(): void {\n    this.uxEl.remove()\n    this.el.style.display = ''\n  }\n\n  private onToggleShown(e: Event): void {\n    e.preventDefault()\n    const targetEl = e.target as HTMLElement\n\n    if (this.state.disabled) return\n    if (this.uxClearButton && e.target === this.uxClearButton) return\n    if (this.uxBody && this.uxBody.contains(targetEl)) return\n\n    if (this.uxEl.classList.contains('-shown')) {\n      this.uxEl.classList.remove('-shown')\n      return\n    }\n\n    this.uxEl.classList.add('-shown')\n    if (this.config.isSearchable && this.uxSearchInput) {\n      this.uxSearchInput.value = ''\n      this.uxSearchInput.dispatchEvent(new Event('input'))\n      if (this.config.isSearchFocus) this.uxSearchInput.focus()\n    }\n  }\n\n  private onClickOutside(e: Event): void {\n    const targetEl = e.target as HTMLElement\n    if (!this.uxEl.contains(targetEl)) {\n      this.uxEl.classList.remove('-shown')\n    }\n  }\n\n  private onClickClear(e: Event): void {\n    e.preventDefault()\n\n    if (this.state.disabled) return\n\n    if (this.config.hideOnClear) this.uxEl.classList.remove('-shown')\n\n    return this.clear()\n  }\n\n  private onClickSelectAll(e: Event): void {\n    e.preventDefault()\n\n    const allSelected = this.options.every((option) => option.attributes.selected)\n    for (const option of this.options) {\n      if (!option.attributes.disabled) {\n        option.attributes.selected = !allSelected\n        option.element.selected = !allSelected\n        option.uxOption?.classList.toggle('-selected', !allSelected)\n      }\n    }\n\n    if (this.config.hideOnSelect) this.uxEl.classList.remove('-shown')\n\n    return this.update()\n  }\n\n  private onClickOption(e: Event): void {\n    e.preventDefault()\n\n    const uxOption = e.target as HTMLElement\n    if (uxOption.classList.contains('-disabled')) return\n    if (!this.state.multiple && uxOption.classList.contains('-selected')) {\n      return\n    }\n\n    if (this.state.multiple) {\n      e.stopPropagation()\n\n      const matchingOption = this.options.find((option) => {\n        return option.uxOption === uxOption\n      })\n\n      if (matchingOption && matchingOption.uxOption) {\n        matchingOption.attributes.selected = !matchingOption.attributes.selected\n        matchingOption.element.selected = matchingOption.attributes.selected\n\n        matchingOption.uxOption.classList.toggle('-selected')\n      }\n    } else {\n      for (const option of this.options) {\n        const isSelected = option.uxOption === uxOption\n        option.attributes.selected = isSelected\n        option.element.selected = isSelected\n\n        if (option.uxOption) {\n          option.uxOption.classList.toggle('-selected', isSelected)\n        }\n      }\n    }\n\n    if (this.config.hideOnSelect) this.uxEl.classList.remove('-shown')\n\n    return this.update()\n  }\n\n  private onSearch(e: Event): void {\n    if (e.target === null) return\n\n    const normalizeText = (str: string): string =>\n      str\n        .toLowerCase()\n        .normalize('NFD')\n        .replace(/[\\u0300-\\u036f]/g, '')\n\n    const input = e.target as HTMLInputElement\n    const text = normalizeText(input.value)\n    const escapedText = text.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')\n    const groups: NodeListOf<HTMLElement> = this.uxEl.querySelectorAll('.ux-select-group')\n\n    if (text === '') {\n      for (const option of this.options) {\n        if (option.uxOption) option.uxOption.style.display = ''\n      }\n\n      if (this.config.isGroupOptions) {\n        for (const group of groups) {\n          group.style.display = ''\n        }\n      }\n\n      return\n    }\n\n    const searchValue = new RegExp(escapedText)\n\n    for (const option of this.options) {\n      const match = searchValue.test(normalizeText(option.data.text))\n      if (option.uxOption) option.uxOption.style.display = match ? '' : 'none'\n    }\n\n    if (this.config.isGroupOptions) {\n      for (const group of groups) {\n        group.style.display = ''\n\n        const groupList = group.querySelector('.ux-select-group__list')\n        if (groupList) {\n          group.style.display = groupList.clientHeight !== 0 ? '' : 'none'\n        }\n      }\n    }\n\n    triggerInput(this.el)\n  }\n\n  private bindEvents(): void {\n    this.uxEl.addEventListener('click', this.onToggleShown.bind(this))\n\n    if (this.uxClearButton) {\n      this.uxClearButton.addEventListener('click', this.onClickClear.bind(this))\n    }\n\n    window.addEventListener('click', this.onClickOutside.bind(this))\n\n    if (this.config.isSearchable && this.uxSearchInput) {\n      this.uxSearchInput.addEventListener('input', this.onSearch.bind(this))\n    }\n  }\n}\n"],"names":["triggerChange","el","change","triggerInput","input","UxSelect","element","params","__publicField","isUpdate","options","isGroupingEnabled","optionsData","option","group","uxOption","optionImage","optionSvg","uniqueGroups","selectTitle","selectedTexts","acc","item","htmlGroup","groupList","isAllDisabled","elem","allSelected","someSelected","selectAllClass","selectGroup","selectGroupTitle","selectGroupList","selectList","selectAllWrap","selectAllCheckbox","selectAllText","groupFragment","optionsFragmentsByGroup","selectListElem","optionImageElem","optionSvgElem","optionUseElem","fragment","replacementChildIndex","selectHead","selectClear","selectBody","selectSearchWrap","selectSearch","select","classes","isTriggerChange","originalOptions","targetEl","matchingOption","isSelected","normalizeText","str","text","escapedText","groups","searchValue","match"],"mappings":"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"}