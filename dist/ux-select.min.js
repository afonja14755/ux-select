var P = Object.defineProperty;
var R = (l, e, t) => e in l ? P(l, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : l[e] = t;
var h = (l, e, t) => (R(l, typeof e != "symbol" ? e + "" : e, t), t), q = (l, e, t) => {
  if (!e.has(l))
    throw TypeError("Cannot " + t);
};
var a = (l, e, t) => (q(l, e, "read from private field"), t ? t.call(l) : e.get(l)), d = (l, e, t) => {
  if (e.has(l))
    throw TypeError("Cannot add the same private member more than once");
  e instanceof WeakSet ? e.add(l) : e.set(l, t);
}, w = (l, e, t, s) => (q(l, e, "write to private field"), s ? s.call(l, t) : e.set(l, t), t);
var n = (l, e, t) => (q(l, e, "access private method"), t);
function k(l) {
  const e = new Event("change");
  l.dispatchEvent(e);
}
function U(l) {
  const e = new Event("input");
  l.dispatchEvent(e);
}
var i, g, $, x, G, f, O, _, D, b, A, v, H, L, V, y, j, S, B, E, I, C, M, T, N;
class z {
  constructor(e, t) {
    d(this, g);
    d(this, x);
    d(this, f);
    d(this, _);
    d(this, b);
    d(this, v);
    d(this, L);
    d(this, y);
    d(this, S);
    d(this, E);
    d(this, C);
    d(this, T);
    h(this, "el");
    h(this, "config");
    h(this, "text");
    h(this, "state");
    h(this, "options");
    h(this, "groups");
    d(this, i, void 0);
    this.el = e, this.config = t || {
      isSearchable: !1,
      isGroupOptions: !1
    }, this.text = {
      placeholder: this.el.dataset.placeholder || this.config.placeholder || "Select an option",
      searchText: this.el.dataset.searchText || this.config.searchText || "Search",
      clearText: this.el.dataset.clearText || this.config.clearText || "Clear option(s)",
      selectedText: this.el.dataset.selectedText || this.config.selectedText || "Selected:"
    }, this.state = {
      multiple: this.el.multiple,
      disabled: this.el.disabled
    }, this.options = [], this.groups = [], w(this, i, null), n(this, g, $).call(this);
  }
  disable() {
    this.state.disabled || (this.el.disabled = !0, a(this, i).classList.add("-disabled"), this.state.disabled = !0);
  }
  enable() {
    this.state.disabled && (this.el.disabled = !1, a(this, i).classList.remove("-disabled"), this.state.disabled = !1);
  }
  update(e = !0) {
    n(this, x, G).call(this), n(this, b, A).call(this), this.el.disabled ? this.disable() : this.enable(), e && k(this.el);
  }
  clear() {
    this.options.forEach((e) => {
      e.attributes.selected && (e.attributes.selected = !1, a(this, i).querySelector(`[data-value="${e.data.value}"]`).classList.remove("-selected"));
    }), this.el.value = "", n(this, f, O).call(this), k(this.el);
  }
  destroy() {
    a(this, i).remove(), this.el.style.display = "";
  }
}
i = new WeakMap(), g = new WeakSet(), $ = function() {
  n(this, x, G).call(this), n(this, v, H).call(this), n(this, T, N).call(this);
}, x = new WeakSet(), G = function() {
  const e = this.el.options;
  if (e.length <= 0)
    throw Error(`Null options at ${this.el}`);
  this.options = [];
  for (const t of e) {
    let s;
    this.config.isGroupOptions ? s = t.dataset.uxSelectGroup ? t.dataset.uxSelectGroup : "empty" : s = "empty", this.groups.indexOf(s) === -1 && this.groups.push(s), this.options.push({
      attributes: {
        selected: t.getAttribute("selected") !== null,
        disabled: t.disabled,
        group: s
      },
      data: {
        text: t.textContent || "",
        value: t.value
      },
      element: t
    });
  }
}, f = new WeakSet(), O = function(e = []) {
  const t = a(this, i).querySelector(".ux-select__title");
  e.length === 1 ? (t.textContent = e[0], a(this, i).classList.add("-filled")) : e.length > 0 && this.state.multiple ? (t.textContent = `${this.text.selectedText} ${e.length}`, a(this, i).classList.add("-filled")) : (t.textContent = this.text.placeholder, a(this, i).classList.remove("-filled"));
}, _ = new WeakSet(), D = function() {
  let e = [];
  this.options.forEach((t) => {
    const s = a(this, i).querySelector(
      `[data-ux-group="${t.attributes.group}"] .ux-select-group__list`
    ), c = document.createElement("li");
    c.classList.add("ux-select-group__elem"), c.dataset.value = t.data.value, c.textContent = t.data.text, t.attributes.selected && (c.classList.add("-selected"), e.push(t.data.text !== null ? t.data.text : "")), t.attributes.disabled && c.classList.add("-disabled"), c.addEventListener("click", n(this, E, I).bind(this)), s.appendChild(c);
  }), n(this, f, O).call(this, e);
}, b = new WeakSet(), A = function() {
  const e = a(this, i).querySelector(".ux-select__dropdown");
  e.innerHTML = "", this.groups.forEach((t) => {
    const s = document.createElement("div");
    if (s.classList.add("ux-select__group", "ux-select-group"), t === "empty" && s.classList.add("-empty"), s.dataset.uxGroup = t, t !== "empty") {
      const r = document.createElement("div");
      r.classList.add("ux-select-group__title"), r.textContent = t, s.appendChild(r);
    }
    const c = document.createElement("ul");
    c.classList.add("ux-select-group__list"), s.appendChild(c), e.appendChild(s);
  }), n(this, _, D).call(this);
}, v = new WeakSet(), H = function() {
  this.el.style.display = "none";
  const e = document.createElement("div");
  e.classList.add("ux-select__head");
  const t = document.createElement("div");
  t.classList.add("ux-select__title"), t.textContent = this.text.placeholder;
  const s = document.createElement("button");
  s.type = "button", s.classList.add("ux-select__clear"), s.title = this.text.clearText, e.append(t, s);
  const c = document.createElement("div");
  if (c.classList.add("ux-select__body"), this.config.isSearchable) {
    const p = document.createElement("div");
    p.classList.add("ux-select__search");
    const m = document.createElement("input");
    m.type = "search", m.classList.add("ux-select-search__input"), m.placeholder = this.text.searchText, p.appendChild(m), c.appendChild(p);
  }
  const r = document.createElement("div");
  r.classList.add("ux-select__dropdown"), c.appendChild(r);
  const u = document.createElement("div");
  let o = ["ux-select", ...this.el.classList];
  this.state.multiple && o.push("-multiple"), this.state.disabled && o.push("-disabled"), u.classList.add(...o), u.append(e, c), this.el.insertAdjacentElement("afterend", u), w(this, i, this.el.nextElementSibling), n(this, b, A).call(this);
}, L = new WeakSet(), V = function(e) {
  e.preventDefault(), !this.state.disabled && e.target !== a(this, i).querySelector(".ux-select__clear") && !a(this, i).querySelector(".ux-select__body").contains(e.target) && (a(this, i).classList.contains("-shown") ? a(this, i).classList.remove("-shown") : (a(this, i).classList.add("-shown"), this.config.isSearchable && (a(this, i).querySelector(".ux-select-search__input").value = "", a(this, i).querySelector(".ux-select-search__input").focus())));
}, y = new WeakSet(), j = function(e) {
  a(this, i).contains(e.target) || a(this, i).classList.remove("-shown");
}, S = new WeakSet(), B = function(e) {
  return e.preventDefault(), this.state.disabled ? !1 : this.clear();
}, E = new WeakSet(), I = function(e) {
  if (e.preventDefault(), e.target !== null) {
    const t = e.target;
    if (t.classList.contains("-disabled"))
      return !1;
    if (this.state.multiple) {
      e.stopPropagation();
      const s = this.el.querySelector(`[value="${t.dataset.value}"]`);
      if (!s)
        throw Error("Option equal this value not found");
      t.classList.contains("-selected") ? s.removeAttribute("selected") : s.setAttribute("selected", "");
    } else if (!t.classList.contains("-selected"))
      this.el.querySelectorAll("option").forEach((s) => {
        s.value === t.dataset.value ? s.setAttribute("selected", "") : s.removeAttribute("selected");
      });
    else
      return !1;
    return this.update();
  }
}, C = new WeakSet(), M = function(e) {
  if (e.target !== null) {
    const s = e.target.value.toLowerCase();
    if (s === "")
      a(this, i).querySelectorAll(".ux-select-group__elem").forEach((c) => c.style.display = ""), a(this, i).querySelectorAll(".ux-select-group").forEach((c) => c.style.display = "");
    else {
      const c = new RegExp(s);
      this.options.forEach((r) => {
        const u = c.test(r.data.text.toLowerCase()), o = a(this, i).querySelector(`[data-value="${r.data.value}"]`);
        o.style.display = u ? "" : "none";
        const p = o.closest(".ux-select-group");
        p.style.display = o.closest(".ux-select-group__list").innerText !== "" ? "" : "none";
      });
    }
    U(this.el);
  }
}, T = new WeakSet(), N = function() {
  a(this, i).addEventListener("click", n(this, L, V).bind(this)), a(this, i).querySelector(".ux-select__clear").addEventListener("click", n(this, S, B).bind(this)), window.addEventListener("click", n(this, y, j).bind(this)), this.config.isSearchable && a(this, i).querySelector(".ux-select-search__input").addEventListener("input", n(this, C, M).bind(this));
};
export {
  z as default
};
