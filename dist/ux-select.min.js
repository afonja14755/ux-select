var M = Object.defineProperty;
var R = (a, e, t) => e in a ? M(a, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : a[e] = t;
var p = (a, e, t) => (R(a, typeof e != "symbol" ? e + "" : e, t), t), w = (a, e, t) => {
  if (!e.has(a))
    throw TypeError("Cannot " + t);
};
var l = (a, e, t) => (w(a, e, "read from private field"), t ? t.call(a) : e.get(a)), d = (a, e, t) => {
  if (e.has(a))
    throw TypeError("Cannot add the same private member more than once");
  e instanceof WeakSet ? e.add(a) : e.set(a, t);
}, T = (a, e, t, s) => (w(a, e, "write to private field"), s ? s.call(a, t) : e.set(a, t), t);
var n = (a, e, t) => (w(a, e, "access private method"), t);
function k(a) {
  const e = new Event("change");
  a.dispatchEvent(e);
}
function U(a) {
  const e = new Event("input");
  a.dispatchEvent(e);
}
var i, b, $, x, G, g, A, _, D, m, O, L, H, y, P, v, j, S, N, E, V, C, B, q, I;
class z {
  constructor(e, t) {
    d(this, b);
    d(this, x);
    d(this, g);
    d(this, _);
    d(this, m);
    d(this, L);
    d(this, y);
    d(this, v);
    d(this, S);
    d(this, E);
    d(this, C);
    d(this, q);
    p(this, "el");
    p(this, "config");
    p(this, "text");
    p(this, "state");
    p(this, "options");
    p(this, "groups");
    d(this, i, void 0);
    this.el = e, this.config = t || {
      isSearchable: !1,
      isGroupOptions: !1
    }, this.text = {
      placeholder: this.el.dataset.placeholder || this.config.placeholder || "Select an option",
      searchText: this.el.dataset.searchText || this.config.searchText || "Search",
      clearText: this.el.dataset.clearText || this.config.clearText || "Clear option(s)",
      selectedText: this.el.dataset.selectedText || this.config.selectedText || "Selected:"
    }, this.state = {
      multiple: this.el.multiple,
      disabled: this.el.disabled
    }, this.options = [], this.groups = [], T(this, i, null), n(this, b, $).call(this);
  }
  disable() {
    this.state.disabled || (this.el.disabled = !0, l(this, i).classList.add("-disabled"), this.state.disabled = !0);
  }
  enable() {
    this.state.disabled && (this.el.disabled = !1, l(this, i).classList.remove("-disabled"), this.state.disabled = !1);
  }
  update(e = !0) {
    n(this, x, G).call(this), n(this, m, O).call(this), this.el.disabled ? this.disable() : this.enable(), e && k(this.el);
  }
  clear() {
    this.options.forEach((e) => {
      e.attributes.selected && (e.attributes.selected = !1, l(this, i).querySelector(`[data-value="${e.data.value}"]`).classList.remove("-selected"), e.element.removeAttribute("selected"));
    }), n(this, g, A).call(this), k(this.el);
  }
  destroy() {
    l(this, i).remove(), this.el.style.display = "";
  }
}
i = new WeakMap(), b = new WeakSet(), $ = function() {
  n(this, x, G).call(this), n(this, L, H).call(this), n(this, q, I).call(this);
}, x = new WeakSet(), G = function() {
  const e = this.el.options;
  if (e.length <= 0)
    throw Error(`Null options at ${this.el}`);
  this.options = [];
  for (const t of e) {
    let s;
    this.config.isGroupOptions ? s = t.dataset.uxSelectGroup ? t.dataset.uxSelectGroup : "empty" : s = "empty", this.groups.indexOf(s) === -1 && this.groups.push(s), this.options.push({
      attributes: {
        selected: t.getAttribute("selected") !== null,
        disabled: t.disabled,
        group: s
      },
      data: {
        text: t.textContent || "",
        value: t.value
      },
      element: t
    });
  }
}, g = new WeakSet(), A = function(e = []) {
  const t = l(this, i).querySelector(".ux-select__title");
  e.length === 1 ? (t.textContent = e[0], l(this, i).classList.add("-filled")) : e.length > 0 && this.state.multiple ? (t.textContent = `${this.text.selectedText} ${e.length}`, l(this, i).classList.add("-filled")) : (t.textContent = this.text.placeholder, l(this, i).classList.remove("-filled"));
}, _ = new WeakSet(), D = function() {
  new Promise((e) => {
    let t = [];
    this.options.forEach((s) => {
      const c = document.createElement("li");
      c.classList.add("ux-select-group__elem"), c.dataset.value = s.data.value, c.textContent = s.data.text, s.attributes.selected && (c.classList.add("-selected"), t.push(s.data.text !== null ? s.data.text : "")), s.attributes.disabled && c.classList.add("-disabled"), c.addEventListener("click", n(this, E, V).bind(this)), l(this, i).querySelector(
        `[data-ux-group="${s.attributes.group}"] .ux-select-group__list`
      ).appendChild(c);
    }), n(this, g, A).call(this, t), this.config.isGroupOptions ? e(!0) : e(!1);
  }).then((e) => {
    if (!e)
      return;
    const t = l(this, i).querySelectorAll(".ux-select-group");
    t.length > 0 && t.forEach((s) => {
      const c = s.querySelector(".ux-select-group__list");
      if (c) {
        const o = c.querySelectorAll(".ux-select-group__elem"), r = c.querySelectorAll(".ux-select-group__elem.-disabled");
        o.length === r.length ? s.classList.add("-disabled") : s.classList.remove("-disabled");
      }
    });
  });
}, m = new WeakSet(), O = function() {
  const e = l(this, i).querySelector(".ux-select__dropdown");
  e.innerHTML = "", this.groups.forEach((t) => {
    const s = document.createElement("div");
    if (s.classList.add("ux-select__group", "ux-select-group"), t === "empty" && s.classList.add("-empty"), s.dataset.uxGroup = t, t !== "empty") {
      const o = document.createElement("div");
      o.classList.add("ux-select-group__title"), o.textContent = t, s.appendChild(o);
    }
    const c = document.createElement("ul");
    c.classList.add("ux-select-group__list"), s.appendChild(c), e.appendChild(s);
  }), n(this, _, D).call(this);
}, L = new WeakSet(), H = function() {
  this.el.style.display = "none";
  const e = document.createElement("div");
  e.classList.add("ux-select__head");
  const t = document.createElement("div");
  t.classList.add("ux-select__title"), t.textContent = this.text.placeholder;
  const s = document.createElement("button");
  s.type = "button", s.classList.add("ux-select__clear"), s.title = this.text.clearText, e.append(t, s);
  const c = document.createElement("div");
  if (c.classList.add("ux-select__body"), this.config.isSearchable) {
    const h = document.createElement("div");
    h.classList.add("ux-select__search");
    const f = document.createElement("input");
    f.type = "search", f.classList.add("ux-select-search__input"), f.placeholder = this.text.searchText, h.appendChild(f), c.appendChild(h);
  }
  const o = document.createElement("div");
  o.classList.add("ux-select__dropdown"), c.appendChild(o);
  const r = document.createElement("div");
  let u = ["ux-select", this.el.classList];
  this.state.multiple && u.push("-multiple"), this.state.disabled && u.push("-disabled"), r.className = u.join(" "), r.append(e, c), this.el.insertAdjacentElement("afterend", r), T(this, i, this.el.nextElementSibling), n(this, m, O).call(this);
}, y = new WeakSet(), P = function(e) {
  e.preventDefault(), !this.state.disabled && e.target !== l(this, i).querySelector(".ux-select__clear") && !l(this, i).querySelector(".ux-select__body").contains(e.target) && (l(this, i).classList.contains("-shown") ? l(this, i).classList.remove("-shown") : (l(this, i).classList.add("-shown"), this.config.isSearchable && (l(this, i).querySelector(".ux-select-search__input").value = "", l(this, i).querySelector(".ux-select-search__input").focus())));
}, v = new WeakSet(), j = function(e) {
  l(this, i).contains(e.target) || l(this, i).classList.remove("-shown");
}, S = new WeakSet(), N = function(e) {
  return e.preventDefault(), this.state.disabled ? !1 : this.clear();
}, E = new WeakSet(), V = function(e) {
  if (e.preventDefault(), e.target !== null) {
    const t = e.target;
    if (t.classList.contains("-disabled"))
      return !1;
    if (this.state.multiple) {
      e.stopPropagation();
      const s = this.el.querySelector(`[value="${t.dataset.value}"]`);
      if (!s)
        throw Error("Option equal this value not found");
      t.classList.contains("-selected") ? s.removeAttribute("selected") : s.setAttribute("selected", "");
    } else if (!t.classList.contains("-selected"))
      this.el.querySelectorAll("option").forEach((s) => {
        s.value === t.dataset.value ? s.setAttribute("selected", "") : s.removeAttribute("selected");
      });
    else
      return !1;
    return this.update();
  }
}, C = new WeakSet(), B = function(e) {
  if (e.target !== null) {
    const t = e.target, s = t.value.toLowerCase(), c = l(this, i).querySelectorAll(".ux-select-group");
    if (s === "")
      l(this, i).querySelectorAll(".ux-select-group__elem").forEach((r) => r.style.display = ""), this.config.isGroupOptions && c.forEach((r) => r.style.display = "");
    else {
      const o = new RegExp(s);
      new Promise((r) => {
        this.options.forEach((u) => {
          const h = o.test(u.data.text.toLowerCase()), f = l(this, i).querySelector(`[data-value="${u.data.value}"]`);
          f.style.display = h ? "" : "none";
        }), this.config.isGroupOptions ? r(!0) : r(!1);
      }).then((r) => {
        r && c.forEach((u) => {
          const h = u.querySelector(".ux-select-group__list");
          h && (u.style.display = h.clientHeight !== 0 ? "" : "none");
        });
      });
    }
    U(this.el);
  }
}, q = new WeakSet(), I = function() {
  l(this, i).addEventListener("click", n(this, y, P).bind(this)), l(this, i).querySelector(".ux-select__clear").addEventListener("click", n(this, S, N).bind(this)), window.addEventListener("click", n(this, v, j).bind(this)), this.config.isSearchable && l(this, i).querySelector(".ux-select-search__input").addEventListener("input", n(this, C, B).bind(this));
};
export {
  z as default
};
